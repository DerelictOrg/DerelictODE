/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/
module derelict.ode.functions;

private {
    import core.stdc.stdio;
    import core.stdc.config;
    import derelict.util.system;
    import derelict.ode.types;
}

extern( C ) @nogc nothrow {
    // common.h
    alias da_dGetConfiguration = char* function();
    alias da_dCheckConfiguration = int function( const( char )* );

    // collision.h
    alias da_dGeomDestroy = void function( dGeomID );
    alias da_dGeomSetData = void function( dGeomID,void* );
    alias da_dGeomGetData = void* function( dGeomID );
    alias da_dGeomSetBody = void function( dGeomID,dBodyID );
    alias da_dGeomGetBody = dBodyID function( dGeomID );
    alias da_dGeomSetPosition = void function( dGeomID,dReal,dReal,dReal );
    alias da_dGeomSetRotation = void function( dGeomID,ref const( dMatrix3 ) );
    alias da_dGeomSetQuaternion = void function( dGeomID,ref const( dQuaternion ) );
    alias da_dGeomGetPosition = dReal* function( dGeomID );
    alias da_dGeomCopyPosition = void function( dGeomID,ref dVector3 );
    alias da_dGeomGetRotation = dReal* function( dGeomID );
    alias da_dGeomCopyRotation = void function( dGeomID,ref dMatrix3 );
    alias da_dGeomGetQuaternion = void function( dGeomID,ref dQuaternion );
    alias da_dGeomGetAABB = void function( dGeomID,dReal* );
    alias da_dGeomIsSpace = int function( dGeomID );
    alias da_dGeomGetSpace = dSpaceID function( dGeomID );
    alias da_dGeomGetClass = int function( dGeomID );
    alias da_dGeomSetCategoryBits = void function( dGeomID,c_ulong );
    alias da_dGeomSetCollideBits = void function( dGeomID,c_ulong );
    alias da_dGeomGetCategoryBits = c_ulong function( dGeomID );
    alias da_dGeomGetCollideBits = c_ulong function( dGeomID );
    alias da_dGeomEnable = void function( dGeomID );
    alias da_dGeomDisable = void function( dGeomID );
    alias da_dGeomIsEnabled = int function( dGeomID );
    alias da_dGeomLowLevelControl = int function( dGeomID, int, int, void*, int* );
    alias da_dGeomGetRelPointPos = void function( dGeomID, dReal, dReal, dReal, ref dVector3 );
    alias da_dGeomGetPosRelPoint = void function( dGeomID, dReal, dReal, dReal, ref dVector3 );
    alias da_dGeomVectorToWorld = void function( dGeomID, dReal, dReal, dReal, ref dVector3 );
    alias da_dGeomVectorFromWorld = void function( dGeomID, dReal, dReal, dReal, ref dVector3 );
    alias da_dGeomSetOffsetPosition = void function( dGeomID,dReal,dReal,dReal );
    alias da_dGeomSetOffsetRotation = void function( dGeomID,ref const( dMatrix3 ) );
    alias da_dGeomSetOffsetQuaternion = void function( dGeomID,ref const( dQuaternion ) );
    alias da_dGeomSetOffsetWorldPosition = void function( dGeomID,dReal,dReal,dReal );
    alias da_dGeomSetOffsetWorldRotation = void function( dGeomID,ref const( dMatrix3 ) );
    alias da_dGeomSetOffsetWorldQuaternion = void function( dGeomID,ref const( dQuaternion ) );
    alias da_dGeomClearOffset = void function( dGeomID );
    alias da_dGeomIsOffset = int function( dGeomID );
    alias da_dGeomGetOffsetPosition = dReal* function( dGeomID );
    alias da_dGeomCopyOffsetPosition = void function( dGeomID,ref dVector3 );
    alias da_dGeomGetOffsetRotation = dReal* function( dGeomID );
    alias da_dGeomGetOffsetQuaternion = void function( dGeomID,ref dQuaternion );
    alias da_dCollide = int function( dGeomID,dGeomID,int,dContactGeom*,int );
    alias da_dSpaceCollide = void function( dSpaceID,void*,dNearCallback );
    alias da_dSpaceCollide2 = void function( dGeomID,dGeomID,void*,dNearCallback );
    alias da_dCreateSphere = dGeomID function( dSpaceID,dReal );
    alias da_dGeomSphereSetRadius = void function( dGeomID,dReal );
    alias da_dGeomSphereGetRadius = dReal function( dGeomID );
    alias da_dGeomSpherePointDepth = dReal function( dGeomID,dReal,dReal,dReal );
    alias da_dCreateConvex = dGeomID function( dSpaceID,dReal*,uint,dReal*,uint,uint* );
    alias da_dGeomSetConvex = void function( dGeomID,dReal*,uint,dReal*,uint,uint* );
    alias da_dCreateBox = dGeomID function( dSpaceID,dReal,dReal,dReal );
    alias da_dGeomBoxSetLengths = void function( dGeomID,dReal,dReal,dReal );
    alias da_dGeomBoxGetLengths = void function( dGeomID,ref dVector3 );
    alias da_dGeomBoxPointDepth = dReal function( dGeomID,dReal,dReal,dReal );
    alias da_dCreatePlane = dGeomID function( dSpaceID,dReal,dReal,dReal,dReal );
    alias da_dGeomPlaneSetParams = void function( dGeomID,dReal,dReal,dReal,dReal );
    alias da_dGeomPlaneGetParams = void function( dGeomID,ref dVector4 );
    alias da_dGeomPlanePointDepth = dReal function( dGeomID,dReal,dReal,dReal );
    alias da_dCreateCapsule = dGeomID function( dSpaceID,dReal,dReal );
    alias da_dGeomCapsuleSetParams = void function( dGeomID,dReal,dReal );
    alias da_dGeomCapsuleGetParams = void function( dGeomID,dReal*,dReal* );
    alias da_dGeomCapsulePointDepth = dReal function( dGeomID,dReal,dReal,dReal );
    alias da_dCreateCylinder = dGeomID function( dSpaceID,dReal,dReal );
    alias da_dGeomCylinderSetParams = void function( dGeomID,dReal,dReal );
    alias da_dGeomCylinderGetParams = void function( dGeomID,dReal*,dReal* );
    alias da_dCreateRay = dGeomID function( dSpaceID,dReal );
    alias da_dGeomRaySetLength = void function( dGeomID,dReal );
    alias da_dGeomRayGetLength = dReal function( dGeomID );
    alias da_dGeomRaySet = void function( dGeomID,dReal,dReal,dReal,dReal,dReal,dReal );
    alias da_dGeomRayGet = void function( dGeomID,ref dVector3,ref dVector3 );
    alias da_dGeomRaySetFirstContact = void function( dGeomID,int );
    alias da_dGeomRayGetFirstContact = int function( dGeomID );
    alias da_dGeomRaySetBackfaceCull = void function( dGeomID,int );
    alias da_dGeomRayGetBackfaceCull = int function( dGeomID );
    alias da_dGeomRaySetClosestHit = void function( dGeomID,int );
    alias da_dGeomRayGetClosestHit = int function( dGeomID );
    alias da_dCreateGeomTransform = dGeomID function( dSpaceID );
    alias da_dGeomTransformSetGeom = void function( dGeomID,dGeomID );
    alias da_dGeomTransformGetGeom = dGeomID function( dGeomID );
    alias da_dGeomTransformSetCleanup = void function( dGeomID,int );
    alias da_dGeomTransformGetCleanup = int function( dGeomID );
    alias da_dGeomTransformSetInfo = void function( dGeomID,int );
    alias da_dGeomTransformGetInfo = int function( dGeomID );
    alias da_dCreateHeightfield = dGeomID function( dSpaceID,dHeightfieldDataID,int );
    alias da_dGeomHeightfieldDataCreate = dHeightfieldDataID function();
    alias da_dGeomHeightfieldDataDestroy = void function( dHeightfieldDataID );
    alias da_dGeomHeightfieldDataBuildCallback = void function( dHeightfieldDataID,void*,dHeightfieldGetHeight,dReal,dReal,int,int,dReal,dReal,dReal,int );
    alias da_dGeomHeightfieldDataBuildByte = void function( dHeightfieldDataID,const( ubyte )*,int,dReal,dReal,int,int,dReal,dReal,dReal,int );
    alias da_dGeomHeightfieldDataBuildShort = void function( dHeightfieldDataID,const( short )*,int,dReal,dReal,int,int,dReal,dReal,dReal,int );
    alias da_dGeomHeightfieldDataBuildSingle = void function( dHeightfieldDataID,const( float )*,int,dReal,dReal,int,int,dReal,dReal,dReal,int );
    alias da_dGeomHeightfieldDataBuildDouble = void function( dHeightfieldDataID,const( double )*,int,dReal,dReal,int,int,dReal,dReal,dReal,int );
    alias da_dGeomHeightfieldDataSetBounds = void function( dHeightfieldDataID,dReal,dReal );
    alias da_dGeomHeightfieldSetHeightfieldData = void function( dGeomID,dHeightfieldDataID );
    alias da_dGeomHeightfieldGetHeightfieldData = dHeightfieldDataID function( dGeomID );
    alias da_dClosestLineSegmentPoints = void function( ref const( dVector3 ),ref const( dVector3 ),ref const( dVector3 ),ref const( dVector3 ),ref dVector3,ref dVector3 );
    alias da_dBoxTouchesBox = int function( ref const( dVector3 ),ref const( dMatrix3 ),ref const( dVector3 ),ref const( dVector3 ),ref const( dMatrix3 ),ref const( dVector3 ) );
    alias da_dBoxBox = int function( ref const( dVector3 ),ref const( dMatrix3 ),ref const( dVector3 ),ref const( dVector3 ),ref const( dMatrix3 ),ref const( dVector3 ),ref dVector3,dReal*,int*,int,dContactGeom*,int );
    //alias da_dInfiniteAABB = void function( dGeomID,ref dReal[6] );
    alias da_dCreateGeomClass = int function( const( dGeomClass )* );
    alias da_dGeomGetClassData = void* function( dGeomID );
    alias da_dCreateGeom = dGeomID function( int );
    alias da_dSetColliderOverride = void function( int,int,dColliderFn );

    // collision_space.h
    alias da_dSimpleSpaceCreate = dSpaceID function( dSpaceID );
    alias da_dHashSpaceCreate = dSpaceID function( dSpaceID );
    alias da_dQuadTreeSpaceCreate = dSpaceID function( dSpaceID,ref const( dVector3 ),ref const( dVector3 ),int );
    alias da_dSweepAndPruneSpaceCreate = dSpaceID function( dSpaceID,int );
    alias da_dSpaceDestroy = void function( dSpaceID );
    alias da_dHashSpaceSetLevels = void function( dSpaceID,int,int );
    alias da_dHashSpaceGetLevels = void function( dSpaceID,int*,int* );
    alias da_dSpaceSetCleanup = void function( dSpaceID,int );
    alias da_dSpaceGetCleanup = int function( dSpaceID );
    alias da_dSpaceSetSublevel = void function( dSpaceID,int );
    alias da_dSpaceGetSublevel = int function( dSpaceID );
    alias da_dSpaceSetManualCleanup = void function( dSpaceID, int );
    alias da_dSpaceGetManualCleanup = int function( dSpaceID );
    alias da_dSpaceAdd = void function( dSpaceID,dGeomID );
    alias da_dSpaceRemove = void function( dSpaceID,dGeomID );
    alias da_dSpaceQuery = int function( dSpaceID,dGeomID );
    alias da_dSpaceClean = void function( dSpaceID );
    alias da_dSpaceGetNumGeoms = int function( dSpaceID );
    alias da_dSpaceGetGeom = dGeomID function( dSpaceID,int );
    alias da_dSpaceGetClass = int function( dSpaceID );

    // collision_trimash.h
    alias da_dGeomTriMeshDataCreate = dTriMeshDataID function();
    alias da_dGeomTriMeshDataDestroy = void function( dTriMeshDataID );
    alias da_dGeomTriMeshDataSet = void function( dTriMeshDataID,int,void* );
    alias da_dGeomTriMeshDataGet = void* function( dTriMeshDataID,int );
    alias da_dGeomTriMeshSetLastTransform = void function( dGeomID,ref dMatrix4 );
    alias da_dGeomTriMeshGetLastTransform = dReal* function( dGeomID );
    alias da_dGeomTriMeshDataBuildSingle = void function( dTriMeshDataID,const( void )*,int,int,const( void )*,int,int );
    alias da_dGeomTriMeshDataBuildSingle1 = void function( dTriMeshDataID,const( void )*,int,int,const( void )*,int,int,const( void )* );
    alias da_dGeomTriMeshDataBuildDouble = void function( dTriMeshDataID,const( void )*,int,int,const( void )*,int,int );
    alias da_dGeomTriMeshDataBuildDouble1 = void function( dTriMeshDataID,const( void )*,int,int,const( void )*,int,int,const( void )* );
    alias da_dGeomTriMeshDataBuildSimple = void function( dTriMeshDataID,const( dReal )*,int,const( dTriIndex )*,int );
    alias da_dGeomTriMeshDataBuildSimple1 = void function( dTriMeshDataID,const( dReal )*,int,const( dTriIndex )*,int,const( int )* );
    alias da_dGeomTriMeshDataPreprocess = void function( dTriMeshDataID );
    alias da_dGeomTriMeshDataGetBuffer = void function( dTriMeshDataID,ubyte**,int* );
    alias da_dGeomTriMeshDataSetBuffer = void function( dTriMeshDataID,ubyte* );
    alias da_dGeomTriMeshSetCallback = void function( dGeomID,dTriCallback );
    alias da_dGeomTriMeshGetCallback = dTriCallback function( dGeomID );
    alias da_dGeomTriMeshSetArrayCallback = void function( dGeomID,dTriArrayCallback );
    alias da_dGeomTriMeshGetArrayCallback = dTriArrayCallback function( dGeomID );
    alias da_dGeomTriMeshSetRayCallback = void function( dGeomID,dTriRayCallback );
    alias da_dGeomTriMeshGetRayCallback = dTriRayCallback function( dGeomID );
    alias da_dGeomTriMeshSetTriMergeCallback = void function( dGeomID,dTriTriMergeCallback );
    alias da_dGeomTriMeshGetTriMergeCallback = dTriTriMergeCallback function( dGeomID );
    alias da_dCreateTriMesh = dGeomID function( dSpaceID,dTriMeshDataID,dTriCallback,dTriArrayCallback,dTriRayCallback );
    alias da_dGeomTriMeshSetData = void function( dGeomID,dTriMeshDataID );
    alias da_dGeomTriMeshGetData = dTriMeshDataID function( dGeomID );
    alias da_dGeomTriMeshEnableTC = void function( dGeomID,int,int );
    alias da_dGeomTriMeshIsTCEnabled = int function( dGeomID,int );
    alias da_dGeomTriMeshClearTCCache = void function( dGeomID );
    alias da_dGeomTriMeshGetTriMeshDataID = dTriMeshDataID function( dGeomID );
    alias da_dGeomTriMeshGetTriangle = void function( dGeomID,int,ref dVector3*,ref dVector3*,ref dVector3* );
    alias da_dGeomTriMeshGetPoint = void function( dGeomID,int,dReal,dReal,ref dVector3 );
    alias da_dGeomTriMeshGetTriangleCount = int function( dGeomID );
    alias da_dGeomTriMeshDataUpdate = void function( dTriMeshDataID );

    // error.h
    alias da_dSetErrorHandler = void function( dMessageFunction );
    alias da_dSetDebugHandler = void function( dMessageFunction );
    alias da_dSetMessageHandler = void function( dMessageFunction );
    alias da_dGetErrorHandler = dMessageFunction function();
    alias da_dGetDebugHandler = dMessageFunction function();
    alias da_dGetMessageHandler = dMessageFunction function();
    alias da_dError = void function( int,const( char )*,... );
    alias da_dDebug = void function( int,const( char )*,... );
    alias da_dMessage = void function( int,const( char )*,... );

    // export-dif.h
    alias da_dWorldExportDIF = void function( dWorldID, FILE*, const( char )* );

    // mass.h
    alias da_dMassCheck = int function( const( dMass )* );
    alias da_dMassSetZero = void function( dMass* );
    alias da_dMassSetParameters = void function( dMass*,dReal,dReal,dReal,dReal,dReal,dReal,dReal,dReal,dReal,dReal );
    alias da_dMassSetSphere = void function( dMass*,dReal,dReal );
    alias da_dMassSetSphereTotal = void function( dMass*,dReal,dReal );
    alias da_dMassSetCapsule = void function( dMass*,dReal,int,dReal,dReal );
    alias da_dMassSetCapsuleTotal = void function( dMass*,dReal,int,dReal,dReal );
    alias da_dMassSetCylinder = void function( dMass*,dReal,int,dReal,dReal );
    alias da_dMassSetCylinderTotal = void function( dMass*,dReal,int,dReal,dReal );
    alias da_dMassSetBox = void function( dMass*,dReal,dReal,dReal,dReal );
    alias da_dMassSetBoxTotal = void function( dMass*,dReal,dReal,dReal,dReal );
    alias da_dMassSetTrimesh = void function( dMass*,dReal,dGeomID );
    alias da_dMassSetTrimeshTotal = void function( dMass*,dReal,dGeomID );
    alias da_dMassAdjust = void function( dMass*,dReal );
    alias da_dMassTranslate = void function( dMass*,dReal,dReal,dReal );
    alias da_dMassRotate = void function( dMass*,ref const( dMatrix3 ) );
    alias da_dMassAdd = void function( dMass*,const( dMass )* );

    // matrix.h
    alias da_dSetZero = void function( dReal*,int );
    alias da_dSetValue = void function( dReal*,int,dReal );
    alias da_dDot = dReal function( const( dReal )*,const( dReal )*,int );
    alias da_dMultiply0 = void function( dReal*,const( dReal )*,const( dReal )*,int,int,int );
    alias da_dMultiply1 = void function( dReal*,const( dReal )*,const( dReal )*,int,int,int );
    alias da_dMultiply2 = void function( dReal*,const( dReal )*,const( dReal )*,int,int,int );
    alias da_dFactorCholesky = int function( dReal*,int );
    alias da_dSolveCholesky = void function( const( dReal )*,dReal*,int );
    alias da_dInvertPDMatrix = int function( const( dReal )*,dReal*,int );
    alias da_dIsPositiveDefinite = int function( const( dReal )*,int );
    alias da_dFactorLDLT = void function( dReal*,dReal*,int,int );
    alias da_dSolveL1 = void function( const( dReal )*,dReal*,int,int );
    alias da_dSolveL1T = void function( const( dReal )*,dReal*,int,int );
    alias da_dVectorScale = void function( dReal*,const( dReal )*,int );
    alias da_dSolveLDLT = void function( const( dReal )*,const( dReal )*,dReal*,int,int );
    alias da_dLDLTAddTL = void function( dReal*,dReal*,const( dReal )*,int,int );
    alias da_dLDLTRemove = void function( dReal**,const( int )*,dReal*,dReal*,int,int,int,int );
    alias da_dRemoveRowCol = void function( dReal*,int,int,int );

    // memory.h
    alias da_dSetAllocHandler = void function( dAllocFunction );
    alias da_dSetReallocHandler = void function( dReallocFunction );
    alias da_dSetFreeHandler = void function( dFreeFunction );
    alias da_dGetAllocHandler = dAllocFunction function();
    alias da_dGetReallocHandler = dReallocFunction function();
    alias da_dGetFreeHandler = dFreeFunction function();
    alias da_dAlloc = void* function( size_t );
    alias da_dRealloc = void* function( void*,size_t,size_t );
    alias da_dFree = void function( void*,size_t );

    // misch.h
    alias da_dTestRand = int function();
    alias da_dRand = c_ulong function();
    alias da_dRandGetSeed = c_ulong function();
    alias da_dRandSetSeed = void function( c_ulong );
    alias da_dRandInt = int function( int );
    alias da_dRandReal = dReal function();
    //alias da_dPrintMatrix = void function( const( dReal )*,int,int,const( char )*,FILE* );
    alias da_dMakeRandomVector = void function( dReal,int,dReal );
    alias da_dMakeRandomMatrix = void function( dReal*,int,int,dReal );
    alias da_dClearUpperTriangle = void function( dReal*,int );
    alias da_dMaxDifference = dReal function( const( dReal )*,const( dReal )*,int,int );
    alias da_dMaxDifferenceLowerTriangle = dReal function( const( dReal )*,const( dReal )*,int );

    // objects.h
    alias da_dWorldCreate = dWorldID function();
    alias da_dWorldDestroy = void function( dWorldID );
    alias da_dWorldSetData = void function( dWorldID,void* );
    alias da_dWorldGetData = void* function( dWorldID );
    alias da_dWorldSetGravity = void function( dWorldID,dReal,dReal,dReal );
    alias da_dWorldGetGravity = void function( dWorldID,ref dVector3 );
    alias da_dWorldSetERP = void function( dWorldID,dReal );
    alias da_dWorldGetERP = dReal function( dWorldID );
    alias da_dWorldSetCFM = void function( dWorldID,dReal );
    alias da_dWorldGetCFM = dReal function( dWorldID );
    alias da_dWorldSetStepIslandsProcessingMaxThreadCount = void function( dWorldID,uint );
    alias da_dWorldGetStepIslandsProcessingMaxThreadCount = uint function( dWorldID );
    alias da_dWorldUseSharedWorkingMemory = int function( dWorldID, dWorldID );
    alias da_dWorldCleanupWorkingMemory = void function( dWorldID );
    alias da_dWorldSetStepMemoryReservationPolicy = int function( dWorldID, const( dWorldStepReserveInfo )* );
    alias da_dWorldSetStepMemoryManager = int function( dWorldID, const( dWorldStepMemoryFunctionsInfo )* );
    alias da_dWorldSetStepThreadingImplementation = void function( dWorldID,const( dThreadingFunctionsInfo)*,dThreadingImplementationID);
    alias da_dWorldStep = int function( dWorldID,dReal );
    alias da_dWorldImpulseToForce = void function( dWorldID,dReal,dReal,dReal,dReal,ref dVector3 );
    alias da_dWorldQuickStep = int function( dWorldID,dReal );
    alias da_dWorldSetQuickStepNumIterations = void function( dWorldID,int );
    alias da_dWorldGetQuickStepNumIterations = int function( dWorldID );
    alias da_dWorldSetQuickStepW = void function( dWorldID,dReal );
    alias da_dWorldGetQuickStepW = dReal function( dWorldID );
    alias da_dWorldSetContactMaxCorrectingVel = void function( dWorldID,dReal );
    alias da_dWorldGetContactMaxCorrectingVel = dReal function( dWorldID );
    alias da_dWorldSetContactSurfaceLayer = void function( dWorldID,dReal );
    alias da_dWorldGetContactSurfaceLayer = dReal function( dWorldID );
    alias da_dWorldGetAutoDisableLinearThreshold = dReal function( dWorldID );
    alias da_dWorldSetAutoDisableLinearThreshold = void function( dWorldID,dReal );
    alias da_dWorldGetAutoDisableAngularThreshold = dReal function( dWorldID );
    alias da_dWorldSetAutoDisableAngularThreshold = void function( dWorldID,dReal );
    alias da_dWorldGetAutoDisableAverageSamplesCount = int function( dWorldID );
    alias da_dWorldSetAutoDisableAverageSamplesCount = void function( dWorldID,uint );
    alias da_dWorldGetAutoDisableSteps = int function( dWorldID );
    alias da_dWorldSetAutoDisableSteps = void function( dWorldID,int );
    alias da_dWorldGetAutoDisableTime = dReal function( dWorldID );
    alias da_dWorldSetAutoDisableTime = void function( dWorldID,dReal );
    alias da_dWorldGetAutoDisableFlag = int function( dWorldID );
    alias da_dWorldSetAutoDisableFlag = void function( dWorldID,int );
    alias da_dWorldGetLinearDampingThreshold = dReal function( dWorldID );
    alias da_dWorldSetLinearDampingThreshold = void function( dWorldID,dReal );
    alias da_dWorldGetAngularDampingThreshold = dReal function( dWorldID );
    alias da_dWorldSetAngularDampingThreshold = void function( dWorldID,dReal );
    alias da_dWorldGetLinearDamping = dReal function( dWorldID );
    alias da_dWorldSetLinearDamping = void function( dWorldID,dReal );
    alias da_dWorldGetAngularDamping = dReal function( dWorldID );
    alias da_dWorldSetAngularDamping = void function( dWorldID,dReal );
    alias da_dWorldSetDamping = void function( dWorldID,dReal,dReal );
    alias da_dWorldGetMaxAngularSpeed = dReal function( dWorldID );
    alias da_dWorldSetMaxAngularSpeed = void function( dWorldID,dReal );
    alias da_dBodyGetAutoDisableLinearThreshold = dReal function( dBodyID );
    alias da_dBodySetAutoDisableLinearThreshold = void function( dBodyID,dReal );
    alias da_dBodyGetAutoDisableAngularThreshold = dReal function( dBodyID );
    alias da_dBodySetAutoDisableAngularThreshold = void function( dBodyID,dReal );
    alias da_dBodyGetAutoDisableAverageSamplesCount = int function( dBodyID );
    alias da_dBodySetAutoDisableAverageSamplesCount = void function( dBodyID,uint );
    alias da_dBodyGetAutoDisableSteps = int function( dBodyID );
    alias da_dBodySetAutoDisableSteps = void function( dBodyID,int );
    alias da_dBodyGetAutoDisableTime = dReal function( dBodyID );
    alias da_dBodySetAutoDisableTime = void function( dBodyID,dReal );
    alias da_dBodyGetAutoDisableFlag = int function( dBodyID );
    alias da_dBodySetAutoDisableFlag = void function( dBodyID,int );
    alias da_dBodySetAutoDisableDefaults = void function( dBodyID );
    alias da_dBodyGetWorld = dWorldID function( dBodyID );
    alias da_dBodyCreate = dBodyID function( dWorldID );
    alias da_dBodyDestroy = void function( dBodyID );
    alias da_dBodySetData = void function( dBodyID,void* );
    alias da_dBodyGetData = void* function( dBodyID );
    alias da_dBodySetPosition = void function( dBodyID,dReal,dReal,dReal );
    alias da_dBodySetRotation = void function( dBodyID,ref const( dMatrix3 ) );
    alias da_dBodySetQuaternion = void function( dBodyID,ref const( dQuaternion ) );
    alias da_dBodySetLinearVel = void function( dBodyID,dReal,dReal,dReal );
    alias da_dBodySetAngularVel = void function( dBodyID,dReal,dReal,dReal );
    alias da_dBodyGetPosition = dReal* function( dBodyID );
    alias da_dBodyCopyPosition = void function( dBodyID,ref dVector3 );
    alias da_dBodyGetRotation = dReal* function( dBodyID );
    alias da_dBodyCopyRotation = void function( dBodyID,ref dMatrix3 );
    alias da_dBodyGetQuaternion = dReal* function( dBodyID );
    alias da_dBodyCopyQuaternion = void function( dBodyID,ref dQuaternion );
    alias da_dBodyGetLinearVel = dReal* function( dBodyID );
    alias da_dBodyGetAngularVel = dReal* function( dBodyID );
    alias da_dBodySetMass = void function( dBodyID,const( dMass )* );
    alias da_dBodyGetMass = void function( dBodyID,dMass* );
    alias da_dBodyAddForce = void function( dBodyID,dReal,dReal,dReal );
    alias da_dBodyAddTorque = void function( dBodyID,dReal,dReal,dReal );
    alias da_dBodyAddRelForce = void function( dBodyID,dReal,dReal,dReal );
    alias da_dBodyAddRelTorque = void function( dBodyID,dReal,dReal,dReal );
    alias da_dBodyAddForceAtPos = void function( dBodyID,dReal,dReal,dReal,dReal,dReal,dReal );
    alias da_dBodyAddForceAtRelPos = void function( dBodyID,dReal,dReal,dReal,dReal,dReal,dReal );
    alias da_dBodyAddRelForceAtPos = void function( dBodyID,dReal,dReal,dReal,dReal,dReal,dReal );
    alias da_dBodyAddRelForceAtRelPos = void function( dBodyID,dReal,dReal,dReal,dReal,dReal,dReal );
    alias da_dBodyGetForce = dReal* function( dBodyID );
    alias da_dBodyGetTorque = dReal* function( dBodyID );
    alias da_dBodySetForce = void function( dBodyID,dReal,dReal,dReal );
    alias da_dBodySetTorque = void function( dBodyID,dReal,dReal,dReal );
    alias da_dBodyGetRelPointPos = void function( dBodyID,dReal,dReal,dReal,ref dVector3 );
    alias da_dBodyGetRelPointVel = void function( dBodyID,dReal,dReal,dReal,ref dVector3 );
    alias da_dBodyGetPointVel = void function( dBodyID,dReal,dReal,dReal,ref dVector3 );
    alias da_dBodyGetPosRelPoint = void function( dBodyID,dReal,dReal,dReal,ref dVector3 );
    alias da_dBodyVectorToWorld = void function( dBodyID,dReal,dReal,dReal,ref dVector3 );
    alias da_dBodyVectorFromWorld = void function( dBodyID,dReal,dReal,dReal,ref dVector3 );
    alias da_dBodySetFiniteRotationMode = void function( dBodyID,int );
    alias da_dBodySetFiniteRotationAxis = void function( dBodyID,dReal,dReal,dReal );
    alias da_dBodyGetFiniteRotationMode = int function( dBodyID );
    alias da_dBodyGetFiniteRotationAxis = void function( dBodyID,ref dVector3 );
    alias da_dBodyGetNumJoints = int function( dBodyID );
    alias da_dBodyGetJoint = dJointID function( dBodyID,int );
    alias da_dBodySetDynamic = void function( dBodyID );
    alias da_dBodySetKinematic = void function( dBodyID );
    alias da_dBodyIsKinematic = int function( dBodyID );
    alias da_dBodyEnable = void function( dBodyID );
    alias da_dBodyDisable = void function( dBodyID );
    alias da_dBodyIsEnabled = int function( dBodyID );
    alias da_dBodySetGravityMode = void function( dBodyID,int );
    alias da_dBodyGetGravityMode = int function( dBodyID );
    alias da_dBodySetMovedCallback = void function( dBodyID,void function( dBodyID ) );
    alias da_dBodyGetFirstGeom = dGeomID function( dBodyID );
    alias da_dBodyGetNextGeom = dGeomID function( dGeomID );
    alias da_dBodySetDampingDefaults = void function( dBodyID );
    alias da_dBodyGetLinearDamping = dReal function( dBodyID );
    alias da_dBodySetLinearDamping = void function( dBodyID,dReal );
    alias da_dBodyGetAngularDamping = dReal function( dBodyID );
    alias da_dBodySetAngularDamping = void function( dBodyID,dReal );
    alias da_dBodySetDamping = void function( dBodyID,dReal,dReal );
    alias da_dBodyGetLinearDampingThreshold = dReal function( dBodyID );
    alias da_dBodySetLinearDampingThreshold = void function( dBodyID,dReal );
    alias da_dBodyGetAngularDampingThreshold = dReal function( dBodyID );
    alias da_dBodySetAngularDampingThreshold = void function( dBodyID,dReal );
    alias da_dBodyGetMaxAngularSpeed = dReal function( dBodyID );
    alias da_dBodySetMaxAngularSpeed = void function( dBodyID,dReal );
    alias da_dBodyGetGyroscopicMode = int function( dBodyID );
    alias da_dBodySetGyroscopicMode = void function( dBodyID,int );
    alias da_dJointCreateBall = dJointID function( dWorldID,dJointGroupID );
    alias da_dJointCreateHinge = dJointID function( dWorldID,dJointGroupID );
    alias da_dJointCreateSlider = dJointID function( dWorldID,dJointGroupID );
    alias da_dJointCreateContact = dJointID function( dWorldID,dJointGroupID,const( dContact )* );
    alias da_dJointCreateHinge2 = dJointID function( dWorldID,dJointGroupID );
    alias da_dJointCreateUniversal = dJointID function( dWorldID,dJointGroupID );
    alias da_dJointCreatePR = dJointID function( dWorldID,dJointGroupID );
    alias da_dJointCreatePU = dJointID function( dWorldID,dJointGroupID );
    alias da_dJointCreatePiston = dJointID function( dWorldID,dJointGroupID );
    alias da_dJointCreateFixed = dJointID function( dWorldID,dJointGroupID );
    alias da_dJointCreateNull = dJointID function( dWorldID,dJointGroupID );
    alias da_dJointCreateAMotor = dJointID function( dWorldID,dJointGroupID );
    alias da_dJointCreateLMotor = dJointID function( dWorldID,dJointGroupID );
    alias da_dJointCreatePlane2D = dJointID function( dWorldID,dJointGroupID );
    alias da_dJointCreateDBall = dJointID function( dWorldID,dJointGroupID );
    alias da_dJointCreateDHinge = dJointID function( dWorldID,dJointGroupID );
    alias da_dJointCreateTransmission = dJointID function( dWorldID, dJointGroupID );
    alias da_dJointDestroy = void function( dJointID );
    alias da_dJointGroupCreate = dJointGroupID function( int );
    alias da_dJointGroupDestroy = void function( dJointGroupID );
    alias da_dJointGroupEmpty = void function( dJointGroupID );
    alias da_dJointGetNumBodies = int function( dJointID );
    alias da_dJointAttach = void function( dJointID,dBodyID,dBodyID );
    alias da_dJointEnable = void function( dJointID );
    alias da_dJointDisable = void function( dJointID );
    alias da_dJointIsEnabled = int function( dJointID );
    alias da_dJointSetData = void function( dJointID,void* );
    alias da_dJointGetData = void* function( dJointID );
    alias da_dJointGetType = dJointType function( dJointID );
    alias da_dJointGetBody = dBodyID function( dJointID,int );
    alias da_dJointSetFeedback = void function( dJointID,dJointFeedback* );
    alias da_dJointGetFeedback = dJointFeedback* function( dJointID );
    alias da_dJointSetBallAnchor = void function( dJointID,dReal,dReal,dReal );
    alias da_dJointSetBallAnchor2 = void function( dJointID,dReal,dReal,dReal );
    alias da_dJointSetBallParam = void function( dJointID,int,dReal );
    alias da_dJointSetHingeAnchor = void function( dJointID,dReal,dReal,dReal );
    alias da_dJointSetHingeAnchorDelta = void function( dJointID,dReal,dReal,dReal,dReal,dReal,dReal );
    alias da_dJointSetHingeAxis = void function( dJointID,dReal,dReal,dReal );
    alias da_dJointSetHingeAxisOffset = void function( dJointID,dReal,dReal,dReal,dReal );
    alias da_dJointSetHingeParam = void function( dJointID,int,dReal );
    alias da_dJointAddHingeTorque = void function( dJointID,dReal );
    alias da_dJointSetSliderAxis = void function( dJointID,dReal,dReal,dReal );
    alias da_dJointSetSliderAxisDelta = void function( dJointID,dReal,dReal,dReal,dReal,dReal,dReal );
    alias da_dJointSetSliderParam = void function( dJointID,int,dReal );
    alias da_dJointAddSliderForce = void function( dJointID,dReal );
    alias da_dJointSetHinge2Anchor = void function( dJointID,dReal,dReal,dReal );
    alias da_dJointSetHinge2Axis1 = void function( dJointID,dReal,dReal,dReal );
    alias da_dJointSetHinge2Axis2 = void function( dJointID,dReal,dReal,dReal );
    alias da_dJointSetHinge2Param = void function( dJointID,int,dReal );
    alias da_dJointAddHinge2Torques = void function( dJointID,dReal,dReal );
    alias da_dJointSetUniversalAnchor = void function( dJointID,dReal,dReal,dReal );
    alias da_dJointSetUniversalAxis1 = void function( dJointID,dReal,dReal,dReal );
    alias da_dJointSetUniversalAxis1Offset = void function( dJointID,dReal,dReal,dReal,dReal,dReal );
    alias da_dJointSetUniversalAxis2 = void function( dJointID,dReal,dReal,dReal );
    alias da_dJointSetUniversalAxis2Offset = void function( dJointID,dReal,dReal,dReal,dReal,dReal );
    alias da_dJointSetUniversalParam = void function( dJointID,int,dReal );
    alias da_dJointAddUniversalTorques = void function( dJointID,dReal,dReal );
    alias da_dJointSetPRAnchor = void function( dJointID,dReal,dReal,dReal );
    alias da_dJointSetPRAxis1 = void function( dJointID,dReal,dReal,dReal );
    alias da_dJointSetPRAxis2 = void function( dJointID,dReal,dReal,dReal );
    alias da_dJointSetPRParam = void function( dJointID,int,dReal );
    alias da_dJointAddPRTorque = void function( dJointID,dReal );
    alias da_dJointSetPUAnchor = void function( dJointID,dReal,dReal,dReal );
    alias da_dJointSetPUAnchorOffset = void function( dJointID,dReal,dReal,dReal,dReal,dReal,dReal );
    alias da_dJointSetPUAxis1 = void function( dJointID,dReal,dReal,dReal );
    alias da_dJointSetPUAxis2 = void function( dJointID,dReal,dReal,dReal );
    alias da_dJointSetPUAxis3 = void function( dJointID,dReal,dReal,dReal );
    alias da_dJointSetPUAxisP = void function( dJointID,dReal,dReal,dReal );
    alias da_dJointSetPUParam = void function( dJointID,int,dReal );
    alias da_dJointSetPistonAnchor = void function( dJointID,dReal,dReal,dReal );
    alias da_dJointSetPistonAnchorOffset = void function( dJointID,dReal,dReal,dReal,dReal,dReal,dReal );
    alias da_dJointSetPistonAxis = void function( dJointID,dReal,dReal,dReal );
    alias da_dJointSetPistonParam = void function( dJointID,int,dReal );
    alias da_dJointAddPistonForce = void function( dJointID,dReal );
    alias da_dJointSetFixed = void function( dJointID );
    alias da_dJointSetFixedParam = void function( dJointID,int,dReal );
    alias da_dJointSetAMotorNumAxes = void function( dJointID,int );
    alias da_dJointSetAMotorAxis = void function( dJointID,int,int,dReal,dReal,dReal );
    alias da_dJointSetAMotorAngle = void function( dJointID,int,dReal );
    alias da_dJointSetAMotorParam = void function( dJointID,int,dReal );
    alias da_dJointSetAMotorMode = void function( dJointID,int );
    alias da_dJointAddAMotorTorques = void function( dJointID,dReal,dReal,dReal );
    alias da_dJointSetLMotorNumAxes = void function( dJointID,int );
    alias da_dJointSetLMotorAxis = void function( dJointID,int,int,dReal,dReal,dReal );
    alias da_dJointSetLMotorParam = void function( dJointID,int,dReal );
    alias da_dJointSetPlane2DXParam = void function( dJointID,int,dReal );
    alias da_dJointSetPlane2DYParam = void function( dJointID,int,dReal );
    alias da_dJointSetPlane2DAngleParam = void function( dJointID,int,dReal );
    alias da_dJointGetBallAnchor = void function( dJointID,ref dVector3 );
    alias da_dJointGetBallAnchor2 = void function( dJointID,ref dVector3 );
    alias da_dJointGetBallParam = dReal function( dJointID,int );
    alias da_dJointGetHingeAnchor = void function( dJointID,ref dVector3 );
    alias da_dJointGetHingeAnchor2 = void function( dJointID,ref dVector3 );
    alias da_dJointGetHingeAxis = void function( dJointID,ref dVector3 );
    alias da_dJointGetHingeParam = dReal function( dJointID,int );
    alias da_dJointGetHingeAngle = dReal function( dJointID );
    alias da_dJointGetHingeAngleRate = dReal function( dJointID );
    alias da_dJointGetSliderPosition = dReal function( dJointID );
    alias da_dJointGetSliderPositionRate = dReal function( dJointID );
    alias da_dJointGetSliderAxis = void function( dJointID,ref dVector3 );
    alias da_dJointGetSliderParam = dReal function( dJointID,int );
    alias da_dJointGetHinge2Anchor = void function( dJointID,ref dVector3 );
    alias da_dJointGetHinge2Anchor2 = void function( dJointID,ref dVector3 );
    alias da_dJointGetHinge2Axis1 = void function( dJointID,ref dVector3 );
    alias da_dJointGetHinge2Axis2 = void function( dJointID,ref dVector3 );
    alias da_dJointGetHinge2Param = dReal function( dJointID,int );
    alias da_dJointGetHinge2Angle1 = dReal function( dJointID );
    alias da_dJointGetHinge2Angle2 = dReal function( dJointID );
    alias da_dJointGetHinge2Angle1Rate = dReal function( dJointID );
    alias da_dJointGetHinge2Angle2Rate = dReal function( dJointID );
    alias da_dJointGetUniversalAnchor = void function( dJointID,ref dVector3 );
    alias da_dJointGetUniversalAnchor2 = void function( dJointID,ref dVector3 );
    alias da_dJointGetUniversalAxis1 = void function( dJointID,ref dVector3 );
    alias da_dJointGetUniversalAxis2 = void function( dJointID,ref dVector3 );
    alias da_dJointGetUniversalParam = dReal function( dJointID,int );
    alias da_dJointGetUniversalAngles = void function( dJointID,dReal*,dReal* );
    alias da_dJointGetUniversalAngle1 = dReal function( dJointID );
    alias da_dJointGetUniversalAngle2 = dReal function( dJointID );
    alias da_dJointGetUniversalAngle1Rate = dReal function( dJointID );
    alias da_dJointGetUniversalAngle2Rate = dReal function( dJointID );
    alias da_dJointGetPRAnchor = void function( dJointID,ref dVector3 );
    alias da_dJointGetPRPosition = dReal function( dJointID );
    alias da_dJointGetPRPositionRate = dReal function( dJointID );
    alias da_dJointGetPRAngle = dReal function( dJointID );
    alias da_dJointGetPRAngleRate = dReal function( dJointID );
    alias da_dJointGetPRAxis1 = void function( dJointID,ref dVector3 );
    alias da_dJointGetPRAxis2 = void function( dJointID,ref dVector3 );
    alias da_dJointGetPRParam = dReal function( dJointID,int );
    alias da_dJointGetPUAnchor = void function( dJointID,ref dVector3 );
    alias da_dJointGetPUPosition = dReal function( dJointID );
    alias da_dJointGetPUPositionRate = dReal function( dJointID );
    alias da_dJointGetPUAxis1 = void function( dJointID,ref dVector3 );
    alias da_dJointGetPUAxis2 = void function( dJointID,ref dVector3 );
    alias da_dJointGetPUAxis3 = void function( dJointID,ref dVector3 );
    alias da_dJointGetPUAxisP = void function( dJointID,ref dVector3 );
    alias da_dJointGetPUAngles = void function( dJointID,dReal*,dReal* );
    alias da_dJointGetPUAngle1 = dReal function( dJointID );
    alias da_dJointGetPUAngle1Rate = dReal function( dJointID );
    alias da_dJointGetPUAngle2 = dReal function( dJointID );
    alias da_dJointGetPUAngle2Rate = dReal function( dJointID );
    alias da_dJointGetPUParam = dReal function( dJointID,int );
    alias da_dJointGetPistonPosition = dReal function( dJointID );
    alias da_dJointGetPistonPositionRate = dReal function( dJointID );
    alias da_dJointGetPistonAngle = dReal function( dJointID );
    alias da_dJointGetPistonAngleRate = dReal function( dJointID );
    alias da_dJointGetPistonAnchor = void function( dJointID,ref dVector3 );
    alias da_dJointGetPistonAnchor2 = void function( dJointID,ref dVector3 );
    alias da_dJointGetPistonAxis = void function( dJointID,ref dVector3 );
    alias da_dJointGetPistonParam = dReal function( dJointID,int );
    alias da_dJointGetAMotorNumAxes = int function( dJointID );
    alias da_dJointGetAMotorAxis = void function( dJointID,int,ref dVector3 );
    alias da_dJointGetAMotorAxisRel = int function( dJointID,int );
    alias da_dJointGetAMotorAngle = dReal function( dJointID,int );
    alias da_dJointGetAMotorAngleRate = dReal function( dJointID,int );
    alias da_dJointGetAMotorParam = dReal function( dJointID,int );
    alias da_dJointGetAMotorMode = int function( dJointID );
    alias da_dJointGetLMotorNumAxes = int function( dJointID );
    alias da_dJointGetLMotorAxis = void function( dJointID,int,ref dVector3 );
    alias da_dJointGetLMotorParam = dReal function( dJointID,int );
    alias da_dJointGetFixedParam = dReal function( dJointID,int );
    alias da_dJointGetTransmissionContactPoint1 = void function( dJointID,ref dVector3 );
    alias da_dJointGetTransmissionContactPoint2 = void function( dJointID,ref dVector3 );
    alias da_dJointSetTransmissionAxis1 = void function( dJointID,dReal,dReal,dReal );
    alias da_dJointGetTransmissionAxis1 = void function( dJointID,ref dVector3 );
    alias da_dJointSetTransmissionAxis2 = void function( dJointID,dReal,dReal,dReal );
    alias da_dJointGetTransmissionAxis2 = void function( dJointID,ref dVector3 );
    alias da_dJointSetTransmissionAnchor1 = void function( dJointID,dReal,dReal,dReal );
    alias da_dJointGetTransmissionAnchor1 = void function( dJointID,ref dVector3 );
    alias da_dJointSetTransmissionAnchor2 = void function( dJointID,dReal,dReal,dReal );
    alias da_dJointGetTransmissionAnchor2 = void function( dJointID,ref dVector3 );
    alias da_dJointSetTransmissionParam = void function( dJointID,int,dReal );
    alias da_dJointGetTransmissionParam = dReal function( dJointID,int );
    alias da_dJointSetTransmissionMode = void function( dJointID,int );
    alias da_dJointGetTransmissionMode = int function( dJointID );
    alias da_dJointSetTransmissionRatio = void function( dJointID,dReal );
    alias da_dJointGetTransmissionRatio = dReal function( dJointID );
    alias da_dJointSetTransmissionAxis = void function( dJointID,dReal,dReal,dReal );
    alias da_dJointGetTransmissionAxis = void function( dJointID,ref dVector3 );
    alias da_dJointGetTransmissionAngle1 = dReal function( dJointID );
    alias da_dJointGetTransmissionAngle2 = dReal function( dJointID );
    alias da_dJointGetTransmissionRadius1 = dReal function( dJointID );
    alias da_dJointGetTransmissionRadius2 = dReal function( dJointID );
    alias da_dJointSetTransmissionRadius1 = void function( dJointID,dReal );
    alias da_dJointSetTransmissionRadius2 = void function( dJointID,dReal );
    alias da_dJointGetTransmissionBacklash = dReal function( dJointID );
    alias da_dJointSetTransmissionBacklash = void function( dJointID,dReal );
    alias da_dJointSetDBallAnchor1 = void function( dJointID,dReal,dReal,dReal );
    alias da_dJointSetDBallAnchor2 = void function( dJointID,dReal,dReal,dReal );
    alias da_dJointGetDBallAnchor1 = void function( dJointID,ref dVector3 );
    alias da_dJointGetDBallAnchor2 = void function( dJointID,ref dVector3 );
    alias da_dJointGetDBallDistance = dReal function( dJointID );
    alias da_dJointSetDBallParam = void function( dJointID,int,dReal );
    alias da_dJointGetDBallParam = dReal function( dJointID,int );
    alias da_dJointSetDHingeAxis = void function( dJointID,dReal,dReal,dReal );
    alias da_dJointGetDHingeAxis = void function( dJointID,ref dVector3 );
    alias da_dJointSetDHingeAnchor1 = void function( dJointID,dReal,dReal,dReal );
    alias da_dJointSetDHingeAnchor2 = void function( dJointID,dReal,dReal,dReal );
    alias da_dJointGetDHingeAnchor1 = void function( dJointID,ref dVector3 );
    alias da_dJointGetDHingeAnchor2 = void function( dJointID,ref dVector3 );
    alias da_dJointGetDHingeDistance = dReal function( dJointID );
    alias da_dJointSetDHingeParam = void function( dJointID,int,dReal );
    alias da_dJointGetDHingeParam = dReal function( dJointID,int );
    alias da_dConnectingJoint = dJointID function( dBodyID,dBodyID );
    alias da_dConnectingJointList = int function( dBodyID,dBodyID,dJointID* );
    alias da_dAreConnected = int function( dBodyID,dBodyID );
    alias da_dAreConnectedExcluding = int function( dBodyID,dBodyID,int );

    // odeinit.h
    alias da_dInitODE = void function();
    alias da_dInitODE2 = int function( uint );
    alias da_dAllocateODEDataForThread = int function( uint );
    alias da_dCleanupODEAllDataForThread = void function();
    alias da_dCloseODE = void function();

    // odemath.h
    alias da_dSafeNormalize3 = int function( ref dVector3 );
    alias da_dSafeNormalize4 = int function( ref dVector4 );
    alias da_dNormalize3 = void function( ref dVector3 );
    alias da_dNormalize4 = void function( ref dVector4 );
    alias da_dPlaneSpace = void function( ref const( dVector3 ), ref dVector3, ref dVector3 );
    alias da_dOrthogonalizeR = void function( ref dMatrix3 );

    // rotation.h
    alias da_dRSetIdentity = void function( ref dMatrix3 );
    alias da_dRFromAxisAndAngle = void function( ref dMatrix3,dReal,dReal,dReal,dReal );
    alias da_dRFromEulerAngles = void function( ref dMatrix3,dReal,dReal,dReal );
    alias da_dRFrom2Axes = void function( ref dMatrix3,dReal,dReal,dReal,dReal,dReal,dReal );
    alias da_dRFromZAxis = void function( ref dMatrix3,dReal,dReal,dReal );
    alias da_dQSetIdentity = void function( ref dQuaternion );
    alias da_dQFromAxisAndAngle = void function( ref dQuaternion,dReal,dReal,dReal,dReal );
    alias da_dQMultiply0 = void function( ref dQuaternion,const( dQuaternion ),const( dQuaternion ) );
    alias da_dQMultiply1 = void function( ref dQuaternion,const( dQuaternion ),const( dQuaternion ) );
    alias da_dQMultiply2 = void function( ref dQuaternion,const( dQuaternion ),const( dQuaternion ) );
    alias da_dQMultiply3 = void function( ref dQuaternion,const( dQuaternion ),const( dQuaternion ) );
    alias da_dRfromQ = void function( ref dMatrix3,const( dQuaternion ) );
    alias da_dQfromR = void function( ref dQuaternion,ref const( dMatrix3 ) );
    alias da_dDQfromW = void function( ref dReal[4],ref const( dVector3 ),const( dQuaternion ) );

    // timer.h
    alias da_dStopwatchReset = void function( dStopwatch* );
    alias da_dStopwatchStart = void function( dStopwatch* );
    alias da_dStopwatchStop = void function( dStopwatch* );
    alias da_dStopwatchTime = double function( dStopwatch* );
    alias da_dTimerStart = void function( const( char )* );
    alias da_dTimerNow = void function( const( char )* );
    alias da_dTimerEnd = void function();
    alias da_dTimerReport = void function( FILE*,int );
    alias da_dTimerTicksPerSecond = double function();
    alias da_dTimerResolution = double function();
}

__gshared {
    da_dGetConfiguration dGetConfiguration;
    da_dCheckConfiguration dCheckConfiguration;

    da_dGeomDestroy dGeomDestroy;
    da_dGeomSetData dGeomSetData;
    da_dGeomGetData dGeomGetData;
    da_dGeomSetBody dGeomSetBody;
    da_dGeomGetBody dGeomGetBody;
    da_dGeomSetPosition dGeomSetPosition;
    da_dGeomSetRotation dGeomSetRotation;
    da_dGeomSetQuaternion dGeomSetQuaternion;
    da_dGeomGetPosition dGeomGetPosition;
    da_dGeomCopyPosition dGeomCopyPosition;
    da_dGeomGetRotation dGeomGetRotation;
    da_dGeomCopyRotation dGeomCopyRotation;
    da_dGeomGetQuaternion dGeomGetQuaternion;
    da_dGeomGetAABB dGeomGetAABB;
    da_dGeomIsSpace dGeomIsSpace;
    da_dGeomGetSpace dGeomGetSpace;
    da_dGeomGetClass dGeomGetClass;
    da_dGeomSetCategoryBits dGeomSetCategoryBits;
    da_dGeomSetCollideBits dGeomSetCollideBits;
    da_dGeomGetCategoryBits dGeomGetCategoryBits;
    da_dGeomGetCollideBits dGeomGetCollideBits;
    da_dGeomEnable dGeomEnable;
    da_dGeomDisable dGeomDisable;
    da_dGeomIsEnabled dGeomIsEnabled;
    da_dGeomLowLevelControl dGeomLowLevelControl;
    da_dGeomGetRelPointPos dGeomGetRelPointPos;
    da_dGeomGetPosRelPoint dGeomGetPosRelPoint;
    da_dGeomVectorToWorld dGeomVectorToWorld;
    da_dGeomVectorFromWorld dGeomVectorFromWorld;
    da_dGeomSetOffsetPosition dGeomSetOffsetPosition;
    da_dGeomSetOffsetRotation dGeomSetOffsetRotation;
    da_dGeomSetOffsetQuaternion dGeomSetOffsetQuaternion;
    da_dGeomSetOffsetWorldPosition dGeomSetOffsetWorldPosition;
    da_dGeomSetOffsetWorldRotation dGeomSetOffsetWorldRotation;
    da_dGeomSetOffsetWorldQuaternion dGeomSetOffsetWorldQuaternion;
    da_dGeomClearOffset dGeomClearOffset;
    da_dGeomIsOffset dGeomIsOffset;
    da_dGeomGetOffsetPosition dGeomGetOffsetPosition;
    da_dGeomCopyOffsetPosition dGeomCopyOffsetPosition;
    da_dGeomGetOffsetRotation dGeomGetOffsetRotation;
    da_dGeomGetOffsetQuaternion dGeomGetOffsetQuaternion;
    da_dCollide dCollide;
    da_dSpaceCollide dSpaceCollide;
    da_dSpaceCollide2 dSpaceCollide2;
    da_dCreateSphere dCreateSphere;
    da_dGeomSphereSetRadius dGeomSphereSetRadius;
    da_dGeomSphereGetRadius dGeomSphereGetRadius;
    da_dGeomSpherePointDepth dGeomSpherePointDepth;
    da_dCreateConvex dCreateConvex;
    da_dGeomSetConvex dGeomSetConvex;
    da_dCreateBox dCreateBox;
    da_dGeomBoxSetLengths dGeomBoxSetLengths;
    da_dGeomBoxGetLengths dGeomBoxGetLengths;
    da_dGeomBoxPointDepth dGeomBoxPointDepth;
    da_dCreatePlane dCreatePlane;
    da_dGeomPlaneSetParams dGeomPlaneSetParams;
    da_dGeomPlaneGetParams dGeomPlaneGetParams;
    da_dGeomPlanePointDepth dGeomPlanePointDepth;
    da_dCreateCapsule dCreateCapsule;
    da_dGeomCapsuleSetParams dGeomCapsuleSetParams;
    da_dGeomCapsuleGetParams dGeomCapsuleGetParams;
    da_dGeomCapsulePointDepth dGeomCapsulePointDepth;
    da_dCreateCylinder dCreateCylinder;
    da_dGeomCylinderSetParams dGeomCylinderSetParams;
    da_dGeomCylinderGetParams dGeomCylinderGetParams;
    da_dCreateRay dCreateRay;
    da_dGeomRaySetLength dGeomRaySetLength;
    da_dGeomRayGetLength dGeomRayGetLength;
    da_dGeomRaySet dGeomRaySet;
    da_dGeomRayGet dGeomRayGet;
    da_dGeomRaySetFirstContact dGeomRaySetFirstContact;
    da_dGeomRayGetFirstContact dGeomRayGetFirstContact;
    da_dGeomRaySetBackfaceCull dGeomRaySetBackfaceCull;
    da_dGeomRayGetBackfaceCull dGeomRayGetBackfaceCull;
    da_dGeomRaySetClosestHit dGeomRaySetClosestHit;
    da_dGeomRayGetClosestHit dGeomRayGetClosestHit;
    da_dCreateHeightfield dCreateHeightfield;
    da_dGeomHeightfieldDataCreate dGeomHeightfieldDataCreate;
    da_dGeomHeightfieldDataDestroy dGeomHeightfieldDataDestroy;
    da_dGeomHeightfieldDataBuildCallback dGeomHeightfieldDataBuildCallback;
    da_dGeomHeightfieldDataBuildByte dGeomHeightfieldDataBuildByte;
    da_dGeomHeightfieldDataBuildShort dGeomHeightfieldDataBuildShort;
    da_dGeomHeightfieldDataBuildSingle dGeomHeightfieldDataBuildSingle;
    da_dGeomHeightfieldDataBuildDouble dGeomHeightfieldDataBuildDouble;
    da_dGeomHeightfieldDataSetBounds dGeomHeightfieldDataSetBounds;
    da_dGeomHeightfieldSetHeightfieldData dGeomHeightfieldSetHeightfieldData;
    da_dGeomHeightfieldGetHeightfieldData dGeomHeightfieldGetHeightfieldData;
    da_dClosestLineSegmentPoints dClosestLineSegmentPoints;
    da_dBoxTouchesBox dBoxTouchesBox;
    da_dBoxBox dBoxBox;
    //da_dInfiniteAABB dInfiniteAABB;
    da_dCreateGeomClass dCreateGeomClass;
    da_dGeomGetClassData dGeomGetClassData;
    da_dCreateGeom dCreateGeom;
    da_dSetColliderOverride dSetColliderOverride;

    da_dSimpleSpaceCreate dSimpleSpaceCreate;
    da_dHashSpaceCreate dHashSpaceCreate;
    da_dQuadTreeSpaceCreate dQuadTreeSpaceCreate;
    da_dSweepAndPruneSpaceCreate dSweepAndPruneSpaceCreate;
    da_dSpaceDestroy dSpaceDestroy;
    da_dHashSpaceSetLevels dHashSpaceSetLevels;
    da_dHashSpaceGetLevels dHashSpaceGetLevels;
    da_dSpaceSetCleanup dSpaceSetCleanup;
    da_dSpaceGetCleanup dSpaceGetCleanup;
    da_dSpaceSetSublevel dSpaceSetSublevel;
    da_dSpaceGetSublevel dSpaceGetSublevel;
    da_dSpaceSetManualCleanup dSpaceSetManualCleanup;
    da_dSpaceGetManualCleanup dSpaceGetManualCleanup;
    da_dSpaceAdd dSpaceAdd;
    da_dSpaceRemove dSpaceRemove;
    da_dSpaceQuery dSpaceQuery;
    da_dSpaceClean dSpaceClean;
    da_dSpaceGetNumGeoms dSpaceGetNumGeoms;
    da_dSpaceGetGeom dSpaceGetGeom;
    da_dSpaceGetClass dSpaceGetClass;

    da_dGeomTriMeshDataCreate dGeomTriMeshDataCreate;
    da_dGeomTriMeshDataDestroy dGeomTriMeshDataDestroy;
    da_dGeomTriMeshDataSet dGeomTriMeshDataSet;
    da_dGeomTriMeshDataGet dGeomTriMeshDataGet;
    da_dGeomTriMeshSetLastTransform dGeomTriMeshSetLastTransform;
    da_dGeomTriMeshGetLastTransform dGeomTriMeshGetLastTransform;
    da_dGeomTriMeshDataBuildSingle dGeomTriMeshDataBuildSingle;
    da_dGeomTriMeshDataBuildSingle1 dGeomTriMeshDataBuildSingle1;
    da_dGeomTriMeshDataBuildDouble dGeomTriMeshDataBuildDouble;
    da_dGeomTriMeshDataBuildDouble1 dGeomTriMeshDataBuildDouble1;
    da_dGeomTriMeshDataBuildSimple dGeomTriMeshDataBuildSimple;
    da_dGeomTriMeshDataBuildSimple1 dGeomTriMeshDataBuildSimple1;
    da_dGeomTriMeshDataPreprocess dGeomTriMeshDataPreprocess;
    da_dGeomTriMeshDataGetBuffer dGeomTriMeshDataGetBuffer;
    da_dGeomTriMeshDataSetBuffer dGeomTriMeshDataSetBuffer;
    da_dGeomTriMeshSetCallback dGeomTriMeshSetCallback;
    da_dGeomTriMeshGetCallback dGeomTriMeshGetCallback;
    da_dGeomTriMeshSetArrayCallback dGeomTriMeshSetArrayCallback;
    da_dGeomTriMeshGetArrayCallback dGeomTriMeshGetArrayCallback;
    da_dGeomTriMeshSetRayCallback dGeomTriMeshSetRayCallback;
    da_dGeomTriMeshGetRayCallback dGeomTriMeshGetRayCallback;
    da_dGeomTriMeshSetTriMergeCallback dGeomTriMeshSetTriMergeCallback;
    da_dGeomTriMeshGetTriMergeCallback dGeomTriMeshGetTriMergeCallback;
    da_dCreateTriMesh dCreateTriMesh;
    da_dGeomTriMeshSetData dGeomTriMeshSetData;
    da_dGeomTriMeshGetData dGeomTriMeshGetData;
    da_dGeomTriMeshEnableTC dGeomTriMeshEnableTC;
    da_dGeomTriMeshIsTCEnabled dGeomTriMeshIsTCEnabled;
    da_dGeomTriMeshClearTCCache dGeomTriMeshClearTCCache;
    da_dGeomTriMeshGetTriMeshDataID dGeomTriMeshGetTriMeshDataID;
    da_dGeomTriMeshGetTriangle dGeomTriMeshGetTriangle;
    da_dGeomTriMeshGetPoint dGeomTriMeshGetPoint;
    da_dGeomTriMeshGetTriangleCount dGeomTriMeshGetTriangleCount;
    da_dGeomTriMeshDataUpdate dGeomTriMeshDataUpdate;
    da_dSetErrorHandler dSetErrorHandler;
    da_dSetDebugHandler dSetDebugHandler;
    da_dSetMessageHandler dSetMessageHandler;
    da_dGetErrorHandler dGetErrorHandler;
    da_dGetDebugHandler dGetDebugHandler;
    da_dGetMessageHandler dGetMessageHandler;
    da_dError dError;
    da_dDebug dDebug;
    da_dMessage dMessage;

    da_dWorldExportDIF dWorldExportDIF;

    da_dMassCheck dMassCheck;
    da_dMassSetZero dMassSetZero;
    da_dMassSetParameters dMassSetParameters;
    da_dMassSetSphere dMassSetSphere;
    da_dMassSetSphereTotal dMassSetSphereTotal;
    da_dMassSetCapsule dMassSetCapsule;
    da_dMassSetCapsuleTotal dMassSetCapsuleTotal;
    da_dMassSetCylinder dMassSetCylinder;
    da_dMassSetCylinderTotal dMassSetCylinderTotal;
    da_dMassSetBox dMassSetBox;
    da_dMassSetBoxTotal dMassSetBoxTotal;
    da_dMassSetTrimesh dMassSetTrimesh;
    da_dMassSetTrimeshTotal dMassSetTrimeshTotal;
    da_dMassAdjust dMassAdjust;
    da_dMassTranslate dMassTranslate;
    da_dMassRotate dMassRotate;
    da_dMassAdd dMassAdd;

    da_dSetZero dSetZero;
    da_dSetValue dSetValue;
    da_dDot dDot;
    da_dMultiply0 dMultiply0;
    da_dMultiply1 dMultiply1;
    da_dMultiply2 dMultiply2;
    da_dFactorCholesky dFactorCholesky;
    da_dSolveCholesky dSolveCholesky;
    da_dInvertPDMatrix dInvertPDMatrix;
    da_dIsPositiveDefinite dIsPositiveDefinite;
    da_dFactorLDLT dFactorLDLT;
    da_dSolveL1 dSolveL1;
    da_dSolveL1T dSolveL1T;
    da_dVectorScale dVectorScale;
    da_dSolveLDLT dSolveLDLT;
    da_dLDLTAddTL dLDLTAddTL;
    da_dLDLTRemove dLDLTRemove;
    da_dRemoveRowCol dRemoveRowCol;

    da_dSetAllocHandler dSetAllocHandler;
    da_dSetReallocHandler dSetReallocHandler;
    da_dSetFreeHandler dSetFreeHandler;
    da_dGetAllocHandler dGetAllocHandler;
    da_dGetReallocHandler dGetReallocHandler;
    da_dGetFreeHandler dGetFreeHandler;
    da_dAlloc dAlloc;
    da_dRealloc dRealloc;
    da_dFree dFree;
    da_dTestRand dTestRand;
    da_dRand dRand;
    da_dRandGetSeed dRandGetSeed;
    da_dRandSetSeed dRandSetSeed;
    da_dRandInt dRandInt;
    da_dRandReal dRandReal;
    //da_dPrintMatrix dPrintMatrix;
    da_dMakeRandomVector dMakeRandomVector;
    da_dMakeRandomMatrix dMakeRandomMatrix;
    da_dClearUpperTriangle dClearUpperTriangle;
    da_dMaxDifference dMaxDifference;
    da_dMaxDifferenceLowerTriangle dMaxDifferenceLowerTriangle;

    da_dWorldCreate dWorldCreate;
    da_dWorldDestroy dWorldDestroy;
    da_dWorldSetData dWorldSetData;
    da_dWorldGetData dWorldGetData;
    da_dWorldSetGravity dWorldSetGravity;
    da_dWorldGetGravity dWorldGetGravity;
    da_dWorldSetERP dWorldSetERP;
    da_dWorldGetERP dWorldGetERP;
    da_dWorldSetCFM dWorldSetCFM;
    da_dWorldGetCFM dWorldGetCFM;
    da_dWorldUseSharedWorkingMemory dWorldUseSharedWorkingMemory;
    da_dWorldSetStepIslandsProcessingMaxThreadCount dWorldSetStepIslandsProcessingMaxThreadCount;
    da_dWorldGetStepIslandsProcessingMaxThreadCount dWorldGetStepIslandsProcessingMaxThreadCount;
    da_dWorldCleanupWorkingMemory dWorldCleanupWorkingMemory;
    da_dWorldSetStepMemoryReservationPolicy dWorldSetStepMemoryReservationPolicy;
    da_dWorldSetStepMemoryManager dWorldSetStepMemoryManager;
    da_dWorldSetStepThreadingImplementation dWorldSetStepThreadingImplementation;
    da_dWorldStep dWorldStep;
    da_dWorldImpulseToForce dWorldImpulseToForce;
    da_dWorldQuickStep dWorldQuickStep;
    da_dWorldSetQuickStepNumIterations dWorldSetQuickStepNumIterations;
    da_dWorldGetQuickStepNumIterations dWorldGetQuickStepNumIterations;
    da_dWorldSetQuickStepW dWorldSetQuickStepW;
    da_dWorldGetQuickStepW dWorldGetQuickStepW;
    da_dWorldSetContactMaxCorrectingVel dWorldSetContactMaxCorrectingVel;
    da_dWorldGetContactMaxCorrectingVel dWorldGetContactMaxCorrectingVel;
    da_dWorldSetContactSurfaceLayer dWorldSetContactSurfaceLayer;
    da_dWorldGetContactSurfaceLayer dWorldGetContactSurfaceLayer;
    da_dWorldGetAutoDisableLinearThreshold dWorldGetAutoDisableLinearThreshold;
    da_dWorldSetAutoDisableLinearThreshold dWorldSetAutoDisableLinearThreshold;
    da_dWorldGetAutoDisableAngularThreshold dWorldGetAutoDisableAngularThreshold;
    da_dWorldSetAutoDisableAngularThreshold dWorldSetAutoDisableAngularThreshold;
    da_dWorldGetAutoDisableAverageSamplesCount dWorldGetAutoDisableAverageSamplesCount;
    da_dWorldSetAutoDisableAverageSamplesCount dWorldSetAutoDisableAverageSamplesCount;
    da_dWorldGetAutoDisableSteps dWorldGetAutoDisableSteps;
    da_dWorldSetAutoDisableSteps dWorldSetAutoDisableSteps;
    da_dWorldGetAutoDisableTime dWorldGetAutoDisableTime;
    da_dWorldSetAutoDisableTime dWorldSetAutoDisableTime;
    da_dWorldGetAutoDisableFlag dWorldGetAutoDisableFlag;
    da_dWorldSetAutoDisableFlag dWorldSetAutoDisableFlag;
    da_dWorldGetLinearDampingThreshold dWorldGetLinearDampingThreshold;
    da_dWorldSetLinearDampingThreshold dWorldSetLinearDampingThreshold;
    da_dWorldGetAngularDampingThreshold dWorldGetAngularDampingThreshold;
    da_dWorldSetAngularDampingThreshold dWorldSetAngularDampingThreshold;
    da_dWorldGetLinearDamping dWorldGetLinearDamping;
    da_dWorldSetLinearDamping dWorldSetLinearDamping;
    da_dWorldGetAngularDamping dWorldGetAngularDamping;
    da_dWorldSetAngularDamping dWorldSetAngularDamping;
    da_dWorldSetDamping dWorldSetDamping;
    da_dWorldGetMaxAngularSpeed dWorldGetMaxAngularSpeed;
    da_dWorldSetMaxAngularSpeed dWorldSetMaxAngularSpeed;
    da_dBodyGetAutoDisableLinearThreshold dBodyGetAutoDisableLinearThreshold;
    da_dBodySetAutoDisableLinearThreshold dBodySetAutoDisableLinearThreshold;
    da_dBodyGetAutoDisableAngularThreshold dBodyGetAutoDisableAngularThreshold;
    da_dBodySetAutoDisableAngularThreshold dBodySetAutoDisableAngularThreshold;
    da_dBodyGetAutoDisableAverageSamplesCount dBodyGetAutoDisableAverageSamplesCount;
    da_dBodySetAutoDisableAverageSamplesCount dBodySetAutoDisableAverageSamplesCount;
    da_dBodyGetAutoDisableSteps dBodyGetAutoDisableSteps;
    da_dBodySetAutoDisableSteps dBodySetAutoDisableSteps;
    da_dBodyGetAutoDisableTime dBodyGetAutoDisableTime;
    da_dBodySetAutoDisableTime dBodySetAutoDisableTime;
    da_dBodyGetAutoDisableFlag dBodyGetAutoDisableFlag;
    da_dBodySetAutoDisableFlag dBodySetAutoDisableFlag;
    da_dBodySetAutoDisableDefaults dBodySetAutoDisableDefaults;
    da_dBodyGetWorld dBodyGetWorld;
    da_dBodyCreate dBodyCreate;
    da_dBodyDestroy dBodyDestroy;
    da_dBodySetData dBodySetData;
    da_dBodyGetData dBodyGetData;
    da_dBodySetPosition dBodySetPosition;
    da_dBodySetRotation dBodySetRotation;
    da_dBodySetQuaternion dBodySetQuaternion;
    da_dBodySetLinearVel dBodySetLinearVel;
    da_dBodySetAngularVel dBodySetAngularVel;
    da_dBodyGetPosition dBodyGetPosition;
    da_dBodyCopyPosition dBodyCopyPosition;
    da_dBodyGetRotation dBodyGetRotation;
    da_dBodyCopyRotation dBodyCopyRotation;
    da_dBodyGetQuaternion dBodyGetQuaternion;
    da_dBodyCopyQuaternion dBodyCopyQuaternion;
    da_dBodyGetLinearVel dBodyGetLinearVel;
    da_dBodyGetAngularVel dBodyGetAngularVel;
    da_dBodySetMass dBodySetMass;
    da_dBodyGetMass dBodyGetMass;
    da_dBodyAddForce dBodyAddForce;
    da_dBodyAddTorque dBodyAddTorque;
    da_dBodyAddRelForce dBodyAddRelForce;
    da_dBodyAddRelTorque dBodyAddRelTorque;
    da_dBodyAddForceAtPos dBodyAddForceAtPos;
    da_dBodyAddForceAtRelPos dBodyAddForceAtRelPos;
    da_dBodyAddRelForceAtPos dBodyAddRelForceAtPos;
    da_dBodyAddRelForceAtRelPos dBodyAddRelForceAtRelPos;
    da_dBodyGetForce dBodyGetForce;
    da_dBodyGetTorque dBodyGetTorque;
    da_dBodySetForce dBodySetForce;
    da_dBodySetTorque dBodySetTorque;
    da_dBodyGetRelPointPos dBodyGetRelPointPos;
    da_dBodyGetRelPointVel dBodyGetRelPointVel;
    da_dBodyGetPointVel dBodyGetPointVel;
    da_dBodyGetPosRelPoint dBodyGetPosRelPoint;
    da_dBodyVectorToWorld dBodyVectorToWorld;
    da_dBodyVectorFromWorld dBodyVectorFromWorld;
    da_dBodySetFiniteRotationMode dBodySetFiniteRotationMode;
    da_dBodySetFiniteRotationAxis dBodySetFiniteRotationAxis;
    da_dBodyGetFiniteRotationMode dBodyGetFiniteRotationMode;
    da_dBodyGetFiniteRotationAxis dBodyGetFiniteRotationAxis;
    da_dBodyGetNumJoints dBodyGetNumJoints;
    da_dBodyGetJoint dBodyGetJoint;
    da_dBodySetDynamic dBodySetDynamic;
    da_dBodySetKinematic dBodySetKinematic;
    da_dBodyIsKinematic dBodyIsKinematic;
    da_dBodyEnable dBodyEnable;
    da_dBodyDisable dBodyDisable;
    da_dBodyIsEnabled dBodyIsEnabled;
    da_dBodySetGravityMode dBodySetGravityMode;
    da_dBodyGetGravityMode dBodyGetGravityMode;
    da_dBodySetMovedCallback dBodySetMovedCallback;
    da_dBodyGetFirstGeom dBodyGetFirstGeom;
    da_dBodyGetNextGeom dBodyGetNextGeom;
    da_dBodySetDampingDefaults dBodySetDampingDefaults;
    da_dBodyGetLinearDamping dBodyGetLinearDamping;
    da_dBodySetLinearDamping dBodySetLinearDamping;
    da_dBodyGetAngularDamping dBodyGetAngularDamping;
    da_dBodySetAngularDamping dBodySetAngularDamping;
    da_dBodySetDamping dBodySetDamping;
    da_dBodyGetLinearDampingThreshold dBodyGetLinearDampingThreshold;
    da_dBodySetLinearDampingThreshold dBodySetLinearDampingThreshold;
    da_dBodyGetAngularDampingThreshold dBodyGetAngularDampingThreshold;
    da_dBodySetAngularDampingThreshold dBodySetAngularDampingThreshold;
    da_dBodyGetMaxAngularSpeed dBodyGetMaxAngularSpeed;
    da_dBodySetMaxAngularSpeed dBodySetMaxAngularSpeed;
    da_dBodyGetGyroscopicMode dBodyGetGyroscopicMode;
    da_dBodySetGyroscopicMode dBodySetGyroscopicMode;
    da_dJointCreateBall dJointCreateBall;
    da_dJointCreateHinge dJointCreateHinge;
    da_dJointCreateSlider dJointCreateSlider;
    da_dJointCreateContact dJointCreateContact;
    da_dJointCreateHinge2 dJointCreateHinge2;
    da_dJointCreateUniversal dJointCreateUniversal;
    da_dJointCreatePR dJointCreatePR;
    da_dJointCreatePU dJointCreatePU;
    da_dJointCreatePiston dJointCreatePiston;
    da_dJointCreateFixed dJointCreateFixed;
    da_dJointCreateNull dJointCreateNull;
    da_dJointCreateAMotor dJointCreateAMotor;
    da_dJointCreateLMotor dJointCreateLMotor;
    da_dJointCreatePlane2D dJointCreatePlane2D;
    da_dJointCreateDBall dJointCreateDBall;
    da_dJointCreateDHinge dJointCreateDHinge;
    da_dJointCreateTransmission dJointCreateTransmission;
    da_dJointDestroy dJointDestroy;
    da_dJointGroupCreate dJointGroupCreate;
    da_dJointGroupDestroy dJointGroupDestroy;
    da_dJointGroupEmpty dJointGroupEmpty;
    da_dJointGetNumBodies dJointGetNumBodies;
    da_dJointAttach dJointAttach;
    da_dJointEnable dJointEnable;
    da_dJointDisable dJointDisable;
    da_dJointIsEnabled dJointIsEnabled;
    da_dJointSetData dJointSetData;
    da_dJointGetData dJointGetData;
    da_dJointGetType dJointGetType;
    da_dJointGetBody dJointGetBody;
    da_dJointSetFeedback dJointSetFeedback;
    da_dJointGetFeedback dJointGetFeedback;
    da_dJointSetBallAnchor dJointSetBallAnchor;
    da_dJointSetBallAnchor2 dJointSetBallAnchor2;
    da_dJointSetBallParam dJointSetBallParam;
    da_dJointSetHingeAnchor dJointSetHingeAnchor;
    da_dJointSetHingeAnchorDelta dJointSetHingeAnchorDelta;
    da_dJointSetHingeAxis dJointSetHingeAxis;
    da_dJointSetHingeAxisOffset dJointSetHingeAxisOffset;
    da_dJointSetHingeParam dJointSetHingeParam;
    da_dJointAddHingeTorque dJointAddHingeTorque;
    da_dJointSetSliderAxis dJointSetSliderAxis;
    da_dJointSetSliderAxisDelta dJointSetSliderAxisDelta;
    da_dJointSetSliderParam dJointSetSliderParam;
    da_dJointAddSliderForce dJointAddSliderForce;
    da_dJointSetHinge2Anchor dJointSetHinge2Anchor;
    da_dJointSetHinge2Axis1 dJointSetHinge2Axis1;
    da_dJointSetHinge2Axis2 dJointSetHinge2Axis2;
    da_dJointSetHinge2Param dJointSetHinge2Param;
    da_dJointAddHinge2Torques dJointAddHinge2Torques;
    da_dJointSetUniversalAnchor dJointSetUniversalAnchor;
    da_dJointSetUniversalAxis1 dJointSetUniversalAxis1;
    da_dJointSetUniversalAxis1Offset dJointSetUniversalAxis1Offset;
    da_dJointSetUniversalAxis2 dJointSetUniversalAxis2;
    da_dJointSetUniversalAxis2Offset dJointSetUniversalAxis2Offset;
    da_dJointSetUniversalParam dJointSetUniversalParam;
    da_dJointAddUniversalTorques dJointAddUniversalTorques;
    da_dJointSetPRAnchor dJointSetPRAnchor;
    da_dJointSetPRAxis1 dJointSetPRAxis1;
    da_dJointSetPRAxis2 dJointSetPRAxis2;
    da_dJointSetPRParam dJointSetPRParam;
    da_dJointAddPRTorque dJointAddPRTorque;
    da_dJointSetPUAnchor dJointSetPUAnchor;
    da_dJointSetPUAnchorOffset dJointSetPUAnchorOffset;
    da_dJointSetPUAxis1 dJointSetPUAxis1;
    da_dJointSetPUAxis2 dJointSetPUAxis2;
    da_dJointSetPUAxis3 dJointSetPUAxis3;
    da_dJointSetPUAxisP dJointSetPUAxisP;
    da_dJointSetPUParam dJointSetPUParam;
    da_dJointSetPistonAnchor dJointSetPistonAnchor;
    da_dJointSetPistonAnchorOffset dJointSetPistonAnchorOffset;
    da_dJointSetPistonAxis dJointSetPistonAxis;
    da_dJointSetPistonParam dJointSetPistonParam;
    da_dJointAddPistonForce dJointAddPistonForce;
    da_dJointSetFixed dJointSetFixed;
    da_dJointSetFixedParam dJointSetFixedParam;
    da_dJointSetAMotorNumAxes dJointSetAMotorNumAxes;
    da_dJointSetAMotorAxis dJointSetAMotorAxis;
    da_dJointSetAMotorAngle dJointSetAMotorAngle;
    da_dJointSetAMotorParam dJointSetAMotorParam;
    da_dJointSetAMotorMode dJointSetAMotorMode;
    da_dJointAddAMotorTorques dJointAddAMotorTorques;
    da_dJointSetLMotorNumAxes dJointSetLMotorNumAxes;
    da_dJointSetLMotorAxis dJointSetLMotorAxis;
    da_dJointSetLMotorParam dJointSetLMotorParam;
    da_dJointSetPlane2DXParam dJointSetPlane2DXParam;
    da_dJointSetPlane2DYParam dJointSetPlane2DYParam;
    da_dJointSetPlane2DAngleParam dJointSetPlane2DAngleParam;
    da_dJointGetBallAnchor dJointGetBallAnchor;
    da_dJointGetBallAnchor2 dJointGetBallAnchor2;
    da_dJointGetBallParam dJointGetBallParam;
    da_dJointGetHingeAnchor dJointGetHingeAnchor;
    da_dJointGetHingeAnchor2 dJointGetHingeAnchor2;
    da_dJointGetHingeAxis dJointGetHingeAxis;
    da_dJointGetHingeParam dJointGetHingeParam;
    da_dJointGetHingeAngle dJointGetHingeAngle;
    da_dJointGetHingeAngleRate dJointGetHingeAngleRate;
    da_dJointGetSliderPosition dJointGetSliderPosition;
    da_dJointGetSliderPositionRate dJointGetSliderPositionRate;
    da_dJointGetSliderAxis dJointGetSliderAxis;
    da_dJointGetSliderParam dJointGetSliderParam;
    da_dJointGetHinge2Anchor dJointGetHinge2Anchor;
    da_dJointGetHinge2Anchor2 dJointGetHinge2Anchor2;
    da_dJointGetHinge2Axis1 dJointGetHinge2Axis1;
    da_dJointGetHinge2Axis2 dJointGetHinge2Axis2;
    da_dJointGetHinge2Param dJointGetHinge2Param;
    da_dJointGetHinge2Angle1 dJointGetHinge2Angle1;
    da_dJointGetHinge2Angle2 dJointGetHinge2Angle2;
    da_dJointGetHinge2Angle1Rate dJointGetHinge2Angle1Rate;
    da_dJointGetHinge2Angle2Rate dJointGetHinge2Angle2Rate;
    da_dJointGetUniversalAnchor dJointGetUniversalAnchor;
    da_dJointGetUniversalAnchor2 dJointGetUniversalAnchor2;
    da_dJointGetUniversalAxis1 dJointGetUniversalAxis1;
    da_dJointGetUniversalAxis2 dJointGetUniversalAxis2;
    da_dJointGetUniversalParam dJointGetUniversalParam;
    da_dJointGetUniversalAngles dJointGetUniversalAngles;
    da_dJointGetUniversalAngle1 dJointGetUniversalAngle1;
    da_dJointGetUniversalAngle2 dJointGetUniversalAngle2;
    da_dJointGetUniversalAngle1Rate dJointGetUniversalAngle1Rate;
    da_dJointGetUniversalAngle2Rate dJointGetUniversalAngle2Rate;
    da_dJointGetPRAnchor dJointGetPRAnchor;
    da_dJointGetPRPosition dJointGetPRPosition;
    da_dJointGetPRPositionRate dJointGetPRPositionRate;
    da_dJointGetPRAngle dJointGetPRAngle;
    da_dJointGetPRAngleRate dJointGetPRAngleRate;
    da_dJointGetPRAxis1 dJointGetPRAxis1;
    da_dJointGetPRAxis2 dJointGetPRAxis2;
    da_dJointGetPRParam dJointGetPRParam;
    da_dJointGetPUAnchor dJointGetPUAnchor;
    da_dJointGetPUPosition dJointGetPUPosition;
    da_dJointGetPUPositionRate dJointGetPUPositionRate;
    da_dJointGetPUAxis1 dJointGetPUAxis1;
    da_dJointGetPUAxis2 dJointGetPUAxis2;
    da_dJointGetPUAxis3 dJointGetPUAxis3;
    da_dJointGetPUAxisP dJointGetPUAxisP;
    da_dJointGetPUAngles dJointGetPUAngles;
    da_dJointGetPUAngle1 dJointGetPUAngle1;
    da_dJointGetPUAngle1Rate dJointGetPUAngle1Rate;
    da_dJointGetPUAngle2 dJointGetPUAngle2;
    da_dJointGetPUAngle2Rate dJointGetPUAngle2Rate;
    da_dJointGetPUParam dJointGetPUParam;
    da_dJointGetPistonPosition dJointGetPistonPosition;
    da_dJointGetPistonPositionRate dJointGetPistonPositionRate;
    da_dJointGetPistonAngle dJointGetPistonAngle;
    da_dJointGetPistonAngleRate dJointGetPistonAngleRate;
    da_dJointGetPistonAnchor dJointGetPistonAnchor;
    da_dJointGetPistonAnchor2 dJointGetPistonAnchor2;
    da_dJointGetPistonAxis dJointGetPistonAxis;
    da_dJointGetPistonParam dJointGetPistonParam;
    da_dJointGetAMotorNumAxes dJointGetAMotorNumAxes;
    da_dJointGetAMotorAxis dJointGetAMotorAxis;
    da_dJointGetAMotorAxisRel dJointGetAMotorAxisRel;
    da_dJointGetAMotorAngle dJointGetAMotorAngle;
    da_dJointGetAMotorAngleRate dJointGetAMotorAngleRate;
    da_dJointGetAMotorParam dJointGetAMotorParam;
    da_dJointGetAMotorMode dJointGetAMotorMode;
    da_dJointGetLMotorNumAxes dJointGetLMotorNumAxes;
    da_dJointGetLMotorAxis dJointGetLMotorAxis;
    da_dJointGetLMotorParam dJointGetLMotorParam;
    da_dJointGetFixedParam dJointGetFixedParam;
    da_dJointGetTransmissionContactPoint1 dJointGetTransmissionContactPoint1;
    da_dJointGetTransmissionContactPoint2 dJointGetTransmissionContactPoint2;
    da_dJointSetTransmissionAxis1 dJointSetTransmissionAxis1;
    da_dJointGetTransmissionAxis1 dJointGetTransmissionAxis1;
    da_dJointSetTransmissionAxis2 dJointSetTransmissionAxis2;
    da_dJointGetTransmissionAxis2 dJointGetTransmissionAxis2;
    da_dJointSetTransmissionAnchor1 dJointSetTransmissionAnchor1;
    da_dJointGetTransmissionAnchor1 dJointGetTransmissionAnchor1;
    da_dJointSetTransmissionAnchor2 dJointSetTransmissionAnchor2;
    da_dJointGetTransmissionAnchor2 dJointGetTransmissionAnchor2;
    da_dJointSetTransmissionParam dJointSetTransmissionParam;
    da_dJointGetTransmissionParam dJointGetTransmissionParam;
    da_dJointSetTransmissionMode dJointSetTransmissionMode;
    da_dJointGetTransmissionMode dJointGetTransmissionMode;
    da_dJointSetTransmissionRatio dJointSetTransmissionRatio;
    da_dJointGetTransmissionRatio dJointGetTransmissionRatio;
    da_dJointSetTransmissionAxis dJointSetTransmissionAxis;
    da_dJointGetTransmissionAxis dJointGetTransmissionAxis;
    da_dJointGetTransmissionAngle1 dJointGetTransmissionAngle1;
    da_dJointGetTransmissionAngle2 dJointGetTransmissionAngle2;
    da_dJointGetTransmissionRadius1 dJointGetTransmissionRadius1;
    da_dJointGetTransmissionRadius2 dJointGetTransmissionRadius2;
    da_dJointSetTransmissionRadius1 dJointSetTransmissionRadius1;
    da_dJointSetTransmissionRadius2 dJointSetTransmissionRadius2;
    da_dJointGetTransmissionBacklash dJointGetTransmissionBacklash;
    da_dJointSetTransmissionBacklash dJointSetTransmissionBacklash;
    da_dJointSetDBallAnchor1 dJointSetDBallAnchor1;
    da_dJointSetDBallAnchor2 dJointSetDBallAnchor2;
    da_dJointGetDBallAnchor1 dJointGetDBallAnchor1;
    da_dJointGetDBallAnchor2 dJointGetDBallAnchor2;
    da_dJointGetDBallDistance dJointGetDBallDistance;
    da_dJointSetDBallParam dJointSetDBallParam;
    da_dJointGetDBallParam dJointGetDBallParam;
    da_dJointSetDHingeAxis dJointSetDHingeAxis;
    da_dJointGetDHingeAxis dJointGetDHingeAxis;
    da_dJointSetDHingeAnchor1 dJointSetDHingeAnchor1;
    da_dJointSetDHingeAnchor2 dJointSetDHingeAnchor2;
    da_dJointGetDHingeAnchor1 dJointGetDHingeAnchor1;
    da_dJointGetDHingeAnchor2 dJointGetDHingeAnchor2;
    da_dJointGetDHingeDistance dJointGetDHingeDistance;
    da_dJointSetDHingeParam dJointSetDHingeParam;
    da_dJointGetDHingeParam dJointGetDHingeParam;
    da_dConnectingJoint dConnectingJoint;
    da_dConnectingJointList dConnectingJointList;
    da_dAreConnected dAreConnected;
    da_dAreConnectedExcluding dAreConnectedExcluding;

    da_dInitODE dInitODE;
    da_dInitODE2 dInitODE2;
    da_dAllocateODEDataForThread dAllocateODEDataForThread;
    da_dCleanupODEAllDataForThread dCleanupODEAllDataForThread;
    da_dCloseODE dCloseODE;
    da_dSafeNormalize3 dSafeNormalize3;
    da_dSafeNormalize4 dSafeNormalize4;
    da_dNormalize3 dNormalize3;
    da_dNormalize4 dNormalize4;
    da_dPlaneSpace dPlaneSpace;
    da_dOrthogonalizeR dOrthogonalizeR;

    da_dRSetIdentity dRSetIdentity;
    da_dRFromAxisAndAngle dRFromAxisAndAngle;
    da_dRFromEulerAngles dRFromEulerAngles;
    da_dRFrom2Axes dRFrom2Axes;
    da_dRFromZAxis dRFromZAxis;
    da_dQSetIdentity dQSetIdentity;
    da_dQFromAxisAndAngle dQFromAxisAndAngle;
    da_dQMultiply0 dQMultiply0;
    da_dQMultiply1 dQMultiply1;
    da_dQMultiply2 dQMultiply2;
    da_dQMultiply3 dQMultiply3;
    da_dRfromQ dRfromQ;
    da_dQfromR dQfromR;
    da_dDQfromW dDQfromW;

    da_dStopwatchReset dStopwatchReset;
    da_dStopwatchStart dStopwatchStart;
    da_dStopwatchStop dStopwatchStop;
    da_dStopwatchTime dStopwatchTime;
    da_dTimerStart dTimerStart;
    da_dTimerNow dTimerNow;
    da_dTimerEnd dTimerEnd;
    da_dTimerReport dTimerReport;
    da_dTimerTicksPerSecond dTimerTicksPerSecond;
    da_dTimerResolution dTimerResolution;
}

alias dCreateCapsule dCreateCCylinder;
alias dGeomCapsuleSetParams dGeomCCylinderSetParams;
alias dGeomCapsuleGetParams dGeomCCylinderGetParams;
alias dGeomCapsulePointDepth dGeomCCylinderPointDepth;
